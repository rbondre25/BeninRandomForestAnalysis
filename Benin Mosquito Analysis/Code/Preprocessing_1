{"cells":[{"cell_type":"markdown","metadata":{"id":"_mvZBvugr6xY"},"source":["#A comparative analysis of neural network models to classify land cover for mosquito abundance prediction\n"]},{"cell_type":"code","execution_count":4,"metadata":{"id":"DDZfGoLoskaY","executionInfo":{"status":"ok","timestamp":1689637947276,"user_tz":420,"elapsed":2020,"user":{"displayName":"RUCHI Bondre","userId":"15419844853674249375"}}},"outputs":[],"source":["import pandas as pd\n","import io\n","import numpy as np\n","from matplotlib import pyplot as plt\n","from sklearn.model_selection import train_test_split\n","import seaborn as sns\n","%matplotlib inline\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.ensemble import AdaBoostClassifier\n","from sklearn.metrics import accuracy_score, confusion_matrix, classification_report"]},{"cell_type":"markdown","metadata":{"id":"EUihjJwFTpmL"},"source":["##Data Pre-processing"]},{"cell_type":"markdown","metadata":{"id":"z4bozb7pddsd"},"source":["https://www.geeksforgeeks.org/ways-to-import-csv-files-in-google-colab/"]},{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":74},"executionInfo":{"elapsed":106760,"status":"ok","timestamp":1689637929030,"user":{"displayName":"RUCHI Bondre","userId":"15419844853674249375"},"user_tz":420},"id":"VjiuFxKscPgS","outputId":"a93fd469-89c7-48f5-b4aa-3b58d054448c"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-9a4b0cec-822c-453f-844f-f3385624f1e2\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-9a4b0cec-822c-453f-844f-f3385624f1e2\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving relative humidity.csv to relative humidity.csv\n"]}],"source":["from google.colab import files\n","\n","uploaded = files.upload()"]},{"cell_type":"code","execution_count":6,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":498,"status":"ok","timestamp":1689637958843,"user":{"displayName":"RUCHI Bondre","userId":"15419844853674249375"},"user_tz":420},"id":"AbwkSNtdcWze","outputId":"d32af846-9f37-4341-b70a-f64549d69c75"},"outputs":[{"output_type":"stream","name":"stdout","text":["                        time   lat    lon   rh_anoms\n","0       1973-01-16T24:00:00Z -67.5  112.5 -10.317931\n","1       1973-01-16T24:00:00Z -52.5  -67.5   5.244000\n","2       1973-01-16T24:00:00Z -47.5  -67.5   3.477287\n","3       1973-01-16T24:00:00Z -42.5  -72.5   6.566667\n","4       1973-01-16T24:00:00Z -42.5  -67.5  -0.395667\n","...                      ...   ...    ...        ...\n","416149  2022-12-16T24:00:00Z  77.5   92.5  -0.009667\n","416150  2022-12-16T24:00:00Z  77.5  102.5   0.174643\n","416151  2022-12-16T24:00:00Z  77.5  137.5  -1.746000\n","416152  2022-12-16T24:00:00Z  82.5  -17.5  -3.965357\n","416153  2022-12-16T24:00:00Z  82.5  -12.5  -7.002174\n","\n","[416154 rows x 4 columns]\n"]}],"source":["temp = pd.read_csv(io.BytesIO(uploaded['relative humidity.csv']))\n","print(temp)"]},{"cell_type":"code","source":["temp.drop(temp.index[:367212],inplace= True)"],"metadata":{"id":"D81-4yisUhZa","executionInfo":{"status":"ok","timestamp":1689638019533,"user_tz":420,"elapsed":244,"user":{"displayName":"RUCHI Bondre","userId":"15419844853674249375"}}},"execution_count":7,"outputs":[]},{"cell_type":"code","source":["temp"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"YZh-qh1JVIM9","executionInfo":{"status":"ok","timestamp":1689638020976,"user_tz":420,"elapsed":319,"user":{"displayName":"RUCHI Bondre","userId":"15419844853674249375"}},"outputId":"400c6cbd-69bd-43e6-f09f-729a6195c613"},"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                        time   lat    lon  rh_anoms\n","367212  2017-05-16T24:00:00Z -67.5   62.5 -0.015667\n","367213  2017-05-16T24:00:00Z -67.5  112.5 -1.574828\n","367214  2017-05-16T24:00:00Z -62.5  -57.5  0.847156\n","367215  2017-05-16T24:00:00Z -62.5  -42.5 -0.440741\n","367216  2017-05-16T24:00:00Z -52.5  -72.5  1.953667\n","...                      ...   ...    ...       ...\n","416149  2022-12-16T24:00:00Z  77.5   92.5 -0.009667\n","416150  2022-12-16T24:00:00Z  77.5  102.5  0.174643\n","416151  2022-12-16T24:00:00Z  77.5  137.5 -1.746000\n","416152  2022-12-16T24:00:00Z  82.5  -17.5 -3.965357\n","416153  2022-12-16T24:00:00Z  82.5  -12.5 -7.002174\n","\n","[48942 rows x 4 columns]"],"text/html":["\n","\n","  <div id=\"df-b4b7e5ca-3347-43db-8ced-48b4a8a3dfa5\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>time</th>\n","      <th>lat</th>\n","      <th>lon</th>\n","      <th>rh_anoms</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>367212</th>\n","      <td>2017-05-16T24:00:00Z</td>\n","      <td>-67.5</td>\n","      <td>62.5</td>\n","      <td>-0.015667</td>\n","    </tr>\n","    <tr>\n","      <th>367213</th>\n","      <td>2017-05-16T24:00:00Z</td>\n","      <td>-67.5</td>\n","      <td>112.5</td>\n","      <td>-1.574828</td>\n","    </tr>\n","    <tr>\n","      <th>367214</th>\n","      <td>2017-05-16T24:00:00Z</td>\n","      <td>-62.5</td>\n","      <td>-57.5</td>\n","      <td>0.847156</td>\n","    </tr>\n","    <tr>\n","      <th>367215</th>\n","      <td>2017-05-16T24:00:00Z</td>\n","      <td>-62.5</td>\n","      <td>-42.5</td>\n","      <td>-0.440741</td>\n","    </tr>\n","    <tr>\n","      <th>367216</th>\n","      <td>2017-05-16T24:00:00Z</td>\n","      <td>-52.5</td>\n","      <td>-72.5</td>\n","      <td>1.953667</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>416149</th>\n","      <td>2022-12-16T24:00:00Z</td>\n","      <td>77.5</td>\n","      <td>92.5</td>\n","      <td>-0.009667</td>\n","    </tr>\n","    <tr>\n","      <th>416150</th>\n","      <td>2022-12-16T24:00:00Z</td>\n","      <td>77.5</td>\n","      <td>102.5</td>\n","      <td>0.174643</td>\n","    </tr>\n","    <tr>\n","      <th>416151</th>\n","      <td>2022-12-16T24:00:00Z</td>\n","      <td>77.5</td>\n","      <td>137.5</td>\n","      <td>-1.746000</td>\n","    </tr>\n","    <tr>\n","      <th>416152</th>\n","      <td>2022-12-16T24:00:00Z</td>\n","      <td>82.5</td>\n","      <td>-17.5</td>\n","      <td>-3.965357</td>\n","    </tr>\n","    <tr>\n","      <th>416153</th>\n","      <td>2022-12-16T24:00:00Z</td>\n","      <td>82.5</td>\n","      <td>-12.5</td>\n","      <td>-7.002174</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>48942 rows × 4 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b4b7e5ca-3347-43db-8ced-48b4a8a3dfa5')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","\n","\n","\n","    <div id=\"df-5086d529-8191-4f06-ae98-cfd53003dc80\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5086d529-8191-4f06-ae98-cfd53003dc80')\"\n","              title=\"Suggest charts.\"\n","              style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","    </div>\n","\n","<style>\n","  .colab-df-quickchart {\n","    background-color: #E8F0FE;\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: #1967D2;\n","    height: 32px;\n","    padding: 0 0 0 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: #E2EBFA;\n","    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: #174EA6;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","    background-color: #3B4455;\n","    fill: #D2E3FC;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart:hover {\n","    background-color: #434B5C;\n","    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","    fill: #FFFFFF;\n","  }\n","</style>\n","\n","    <script>\n","      async function quickchart(key) {\n","        const containerElement = document.querySelector('#' + key);\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      }\n","    </script>\n","\n","      <script>\n","\n","function displayQuickchartButton(domScope) {\n","  let quickchartButtonEl =\n","    domScope.querySelector('#df-5086d529-8191-4f06-ae98-cfd53003dc80 button.colab-df-quickchart');\n","  quickchartButtonEl.style.display =\n","    google.colab.kernel.accessAllowed ? 'block' : 'none';\n","}\n","\n","        displayQuickchartButton(document);\n","      </script>\n","      <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-b4b7e5ca-3347-43db-8ced-48b4a8a3dfa5 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-b4b7e5ca-3347-43db-8ced-48b4a8a3dfa5');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["\n","from google.colab import files\n","temp.to_csv('humidity 01.csv')\n","files.download('humidity 01.csv')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":17},"id":"I6g8e6awMM7r","executionInfo":{"status":"ok","timestamp":1689638040960,"user_tz":420,"elapsed":510,"user":{"displayName":"RUCHI Bondre","userId":"15419844853674249375"}},"outputId":"9a50a0c3-dcaf-41fd-8624-94db9ae89a59"},"execution_count":9,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["download(\"download_bd3ef293-b54c-4846-a3c3-74ff33b7b80a\", \"humidity 01.csv\", 2398680)"]},"metadata":{}}]}],"metadata":{"accelerator":"GPU","colab":{"provenance":[]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}