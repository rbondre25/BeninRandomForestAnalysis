{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"wI0r42e-6Pq4"},"outputs":[],"source":["import pandas as pd\n","import datetime as dt\n","from pandas import Series,DataFrame\n","\n","# numpy, matplotlib, seaborn\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","sns.set_style('whitegrid')\n","%matplotlib inline\n","\n","#ML classifiers\n","from sklearn.ensemble import RandomForestClassifier\n","\n","import io\n","\n","from sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV, KFold\n","from sklearn.preprocessing import StandardScaler, MinMaxScaler\n","from sklearn.experimental import enable_halving_search_cv\n","from sklearn.base import BaseEstimator, TransformerMixin\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.ensemble import RandomForestRegressor\n","from sklearn.neighbors import KNeighborsClassifier\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn.compose import ColumnTransformer\n","from sklearn.metrics import confusion_matrix\n","from pandas.plotting import scatter_matrix\n","from imblearn.over_sampling import SMOTE\n","from sklearn.metrics import recall_score\n","from sklearn.pipeline import Pipeline\n","import sklearn.metrics.cluster as smc\n","from sklearn.cluster import KMeans\n","import matplotlib.pyplot as plt\n","import torch.nn.functional as F\n","from torch.optim import Adam\n","from sklearn import metrics\n","from sklearn.svm import SVC\n","import seaborn as sns\n","import torch.nn as nn\n","import pandas as pd\n","import numpy as np\n","import itertools\n","import warnings\n","import torch\n","\n","pd.set_option('display.max_columns', None)"]},{"cell_type":"code","source":["from google.colab import files\n","uploaded = files.upload()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":74},"id":"-27ajRUb6Uqh","executionInfo":{"status":"ok","timestamp":1689883927496,"user_tz":420,"elapsed":7082,"user":{"displayName":"RUCHI Bondre","userId":"15419844853674249375"}},"outputId":"77b8fce5-cfca-4e26-d3e9-dfd56031fd68"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-1b80657e-473d-4df7-8486-1c5fe5df43e6\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-1b80657e-473d-4df7-8486-1c5fe5df43e6\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving CombinedData.csv to CombinedData.csv\n"]}]},{"cell_type":"code","source":["df = pd.read_csv(io.BytesIO(uploaded['CombinedData.csv']))\n"],"metadata":{"id":"5bcud_eI7AWs"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["data = df\n","data"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":468},"id":"4dCt_iar7UHs","executionInfo":{"status":"ok","timestamp":1689884010380,"user_tz":420,"elapsed":261,"user":{"displayName":"RUCHI Bondre","userId":"15419844853674249375"}},"outputId":"1bd022ae-7bdc-4248-d256-0af63c869fca"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["            date      lat      lon  parameters    rfh_avg  vim_avg  month  \\\n","0     2018-06-14  6.47657  2.63914           0  60.893739  51.9983      6   \n","1     2018-06-14  6.47657  2.63914          41  60.893739  51.9983      6   \n","2     2018-06-14  6.47657  2.63914          36  60.893739  51.9983      6   \n","3     2018-06-15  6.48287  2.59392          42  60.893739  51.9983      6   \n","4     2018-07-02  6.48289  2.62829           0  56.126466  53.8446      7   \n","...          ...      ...      ...         ...        ...      ...    ...   \n","1197  2022-07-05  6.41566  2.33807           0  56.126466  53.8446      7   \n","1198  2022-07-05  6.41567  2.34801           0  56.126466  53.8446      7   \n","1199  2022-07-05  6.41566  2.33807           0  56.126466  53.8446      7   \n","1200  2022-07-05  6.41566  2.33807           0  56.126466  53.8446      7   \n","1201  2022-07-05  6.41566  2.33807           0  56.126466  53.8446      7   \n","\n","      year  rh_anoms      t_abs  \n","0     2018 -1.204607  26.391665  \n","1     2018 -1.204607  26.391665  \n","2     2018 -1.204607  26.391665  \n","3     2018 -1.204607  26.391665  \n","4     2018  0.094843  25.458334  \n","...    ...       ...        ...  \n","1197  2022 -1.998014  25.350000  \n","1198  2022 -1.998014  25.350000  \n","1199  2022 -1.998014  25.350000  \n","1200  2022 -1.998014  25.350000  \n","1201  2022 -1.998014  25.350000  \n","\n","[1202 rows x 10 columns]"],"text/html":["\n","\n","  <div id=\"df-6a7518d0-46bd-4359-ad21-08925fc45c4c\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>date</th>\n","      <th>lat</th>\n","      <th>lon</th>\n","      <th>parameters</th>\n","      <th>rfh_avg</th>\n","      <th>vim_avg</th>\n","      <th>month</th>\n","      <th>year</th>\n","      <th>rh_anoms</th>\n","      <th>t_abs</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2018-06-14</td>\n","      <td>6.47657</td>\n","      <td>2.63914</td>\n","      <td>0</td>\n","      <td>60.893739</td>\n","      <td>51.9983</td>\n","      <td>6</td>\n","      <td>2018</td>\n","      <td>-1.204607</td>\n","      <td>26.391665</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2018-06-14</td>\n","      <td>6.47657</td>\n","      <td>2.63914</td>\n","      <td>41</td>\n","      <td>60.893739</td>\n","      <td>51.9983</td>\n","      <td>6</td>\n","      <td>2018</td>\n","      <td>-1.204607</td>\n","      <td>26.391665</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2018-06-14</td>\n","      <td>6.47657</td>\n","      <td>2.63914</td>\n","      <td>36</td>\n","      <td>60.893739</td>\n","      <td>51.9983</td>\n","      <td>6</td>\n","      <td>2018</td>\n","      <td>-1.204607</td>\n","      <td>26.391665</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2018-06-15</td>\n","      <td>6.48287</td>\n","      <td>2.59392</td>\n","      <td>42</td>\n","      <td>60.893739</td>\n","      <td>51.9983</td>\n","      <td>6</td>\n","      <td>2018</td>\n","      <td>-1.204607</td>\n","      <td>26.391665</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2018-07-02</td>\n","      <td>6.48289</td>\n","      <td>2.62829</td>\n","      <td>0</td>\n","      <td>56.126466</td>\n","      <td>53.8446</td>\n","      <td>7</td>\n","      <td>2018</td>\n","      <td>0.094843</td>\n","      <td>25.458334</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>1197</th>\n","      <td>2022-07-05</td>\n","      <td>6.41566</td>\n","      <td>2.33807</td>\n","      <td>0</td>\n","      <td>56.126466</td>\n","      <td>53.8446</td>\n","      <td>7</td>\n","      <td>2022</td>\n","      <td>-1.998014</td>\n","      <td>25.350000</td>\n","    </tr>\n","    <tr>\n","      <th>1198</th>\n","      <td>2022-07-05</td>\n","      <td>6.41567</td>\n","      <td>2.34801</td>\n","      <td>0</td>\n","      <td>56.126466</td>\n","      <td>53.8446</td>\n","      <td>7</td>\n","      <td>2022</td>\n","      <td>-1.998014</td>\n","      <td>25.350000</td>\n","    </tr>\n","    <tr>\n","      <th>1199</th>\n","      <td>2022-07-05</td>\n","      <td>6.41566</td>\n","      <td>2.33807</td>\n","      <td>0</td>\n","      <td>56.126466</td>\n","      <td>53.8446</td>\n","      <td>7</td>\n","      <td>2022</td>\n","      <td>-1.998014</td>\n","      <td>25.350000</td>\n","    </tr>\n","    <tr>\n","      <th>1200</th>\n","      <td>2022-07-05</td>\n","      <td>6.41566</td>\n","      <td>2.33807</td>\n","      <td>0</td>\n","      <td>56.126466</td>\n","      <td>53.8446</td>\n","      <td>7</td>\n","      <td>2022</td>\n","      <td>-1.998014</td>\n","      <td>25.350000</td>\n","    </tr>\n","    <tr>\n","      <th>1201</th>\n","      <td>2022-07-05</td>\n","      <td>6.41566</td>\n","      <td>2.33807</td>\n","      <td>0</td>\n","      <td>56.126466</td>\n","      <td>53.8446</td>\n","      <td>7</td>\n","      <td>2022</td>\n","      <td>-1.998014</td>\n","      <td>25.350000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1202 rows × 10 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6a7518d0-46bd-4359-ad21-08925fc45c4c')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","\n","\n","\n","    <div id=\"df-207192c3-61f8-44f6-ba6d-873a3c6ba718\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-207192c3-61f8-44f6-ba6d-873a3c6ba718')\"\n","              title=\"Suggest charts.\"\n","              style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","    </div>\n","\n","<style>\n","  .colab-df-quickchart {\n","    background-color: #E8F0FE;\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: #1967D2;\n","    height: 32px;\n","    padding: 0 0 0 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: #E2EBFA;\n","    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: #174EA6;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","    background-color: #3B4455;\n","    fill: #D2E3FC;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart:hover {\n","    background-color: #434B5C;\n","    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","    fill: #FFFFFF;\n","  }\n","</style>\n","\n","    <script>\n","      async function quickchart(key) {\n","        const containerElement = document.querySelector('#' + key);\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      }\n","    </script>\n","\n","      <script>\n","\n","function displayQuickchartButton(domScope) {\n","  let quickchartButtonEl =\n","    domScope.querySelector('#df-207192c3-61f8-44f6-ba6d-873a3c6ba718 button.colab-df-quickchart');\n","  quickchartButtonEl.style.display =\n","    google.colab.kernel.accessAllowed ? 'block' : 'none';\n","}\n","\n","        displayQuickchartButton(document);\n","      </script>\n","      <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-6a7518d0-46bd-4359-ad21-08925fc45c4c button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-6a7518d0-46bd-4359-ad21-08925fc45c4c');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["data = data.drop(columns=['date', 'lat', 'lon', 'month', 'year' ])\n","data.dtypes"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VpQpEml87zsn","executionInfo":{"status":"ok","timestamp":1689884014488,"user_tz":420,"elapsed":349,"user":{"displayName":"RUCHI Bondre","userId":"15419844853674249375"}},"outputId":"e0b3cea8-7925-42da-9e69-126338cd2a8c"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["parameters      int64\n","rfh_avg       float64\n","vim_avg       float64\n","rh_anoms      float64\n","t_abs         float64\n","dtype: object"]},"metadata":{},"execution_count":7}]},{"cell_type":"code","source":["data"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"RGSLiwt5ANO0","executionInfo":{"status":"ok","timestamp":1689884035962,"user_tz":420,"elapsed":218,"user":{"displayName":"RUCHI Bondre","userId":"15419844853674249375"}},"outputId":"52efa388-5409-4bc1-ca11-2d3f9efe9b27"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["      parameters    rfh_avg  vim_avg  rh_anoms      t_abs\n","0              0  60.893739  51.9983 -1.204607  26.391665\n","1             41  60.893739  51.9983 -1.204607  26.391665\n","2             36  60.893739  51.9983 -1.204607  26.391665\n","3             42  60.893739  51.9983 -1.204607  26.391665\n","4              0  56.126466  53.8446  0.094843  25.458334\n","...          ...        ...      ...       ...        ...\n","1197           0  56.126466  53.8446 -1.998014  25.350000\n","1198           0  56.126466  53.8446 -1.998014  25.350000\n","1199           0  56.126466  53.8446 -1.998014  25.350000\n","1200           0  56.126466  53.8446 -1.998014  25.350000\n","1201           0  56.126466  53.8446 -1.998014  25.350000\n","\n","[1202 rows x 5 columns]"],"text/html":["\n","\n","  <div id=\"df-330af91f-728d-40d6-8a48-fee05c88d543\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>parameters</th>\n","      <th>rfh_avg</th>\n","      <th>vim_avg</th>\n","      <th>rh_anoms</th>\n","      <th>t_abs</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>60.893739</td>\n","      <td>51.9983</td>\n","      <td>-1.204607</td>\n","      <td>26.391665</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>41</td>\n","      <td>60.893739</td>\n","      <td>51.9983</td>\n","      <td>-1.204607</td>\n","      <td>26.391665</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>36</td>\n","      <td>60.893739</td>\n","      <td>51.9983</td>\n","      <td>-1.204607</td>\n","      <td>26.391665</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>42</td>\n","      <td>60.893739</td>\n","      <td>51.9983</td>\n","      <td>-1.204607</td>\n","      <td>26.391665</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>56.126466</td>\n","      <td>53.8446</td>\n","      <td>0.094843</td>\n","      <td>25.458334</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>1197</th>\n","      <td>0</td>\n","      <td>56.126466</td>\n","      <td>53.8446</td>\n","      <td>-1.998014</td>\n","      <td>25.350000</td>\n","    </tr>\n","    <tr>\n","      <th>1198</th>\n","      <td>0</td>\n","      <td>56.126466</td>\n","      <td>53.8446</td>\n","      <td>-1.998014</td>\n","      <td>25.350000</td>\n","    </tr>\n","    <tr>\n","      <th>1199</th>\n","      <td>0</td>\n","      <td>56.126466</td>\n","      <td>53.8446</td>\n","      <td>-1.998014</td>\n","      <td>25.350000</td>\n","    </tr>\n","    <tr>\n","      <th>1200</th>\n","      <td>0</td>\n","      <td>56.126466</td>\n","      <td>53.8446</td>\n","      <td>-1.998014</td>\n","      <td>25.350000</td>\n","    </tr>\n","    <tr>\n","      <th>1201</th>\n","      <td>0</td>\n","      <td>56.126466</td>\n","      <td>53.8446</td>\n","      <td>-1.998014</td>\n","      <td>25.350000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1202 rows × 5 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-330af91f-728d-40d6-8a48-fee05c88d543')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","\n","\n","\n","    <div id=\"df-f489b4f5-1dc7-41ab-addf-b6e996d9c7d6\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f489b4f5-1dc7-41ab-addf-b6e996d9c7d6')\"\n","              title=\"Suggest charts.\"\n","              style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","    </div>\n","\n","<style>\n","  .colab-df-quickchart {\n","    background-color: #E8F0FE;\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: #1967D2;\n","    height: 32px;\n","    padding: 0 0 0 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: #E2EBFA;\n","    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: #174EA6;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","    background-color: #3B4455;\n","    fill: #D2E3FC;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart:hover {\n","    background-color: #434B5C;\n","    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","    fill: #FFFFFF;\n","  }\n","</style>\n","\n","    <script>\n","      async function quickchart(key) {\n","        const containerElement = document.querySelector('#' + key);\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      }\n","    </script>\n","\n","      <script>\n","\n","function displayQuickchartButton(domScope) {\n","  let quickchartButtonEl =\n","    domScope.querySelector('#df-f489b4f5-1dc7-41ab-addf-b6e996d9c7d6 button.colab-df-quickchart');\n","  quickchartButtonEl.style.display =\n","    google.colab.kernel.accessAllowed ? 'block' : 'none';\n","}\n","\n","        displayQuickchartButton(document);\n","      </script>\n","      <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-330af91f-728d-40d6-8a48-fee05c88d543 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-330af91f-728d-40d6-8a48-fee05c88d543');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["# Separate labels from data\n","labels = data['parameters']\n","data = data.drop(columns=['parameters'])"],"metadata":{"id":"LHMXh-v36xWA"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Split using new data\n","X_train, X_test, y_train, y_test = train_test_split(data, labels, test_size=0.1, random_state=0)"],"metadata":{"id":"rySnaA9W6x6W"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from sklearn.ensemble import RandomForestRegressor\n","rf = RandomForestRegressor(random_state = 42)\n","from pprint import pprint\n","# Look at parameters used by our current forest\n","print('Parameters currently in use:\\n')\n","pprint(rf.get_params())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uVEmDX2nAN9b","executionInfo":{"status":"ok","timestamp":1689886663006,"user_tz":420,"elapsed":157,"user":{"displayName":"RUCHI Bondre","userId":"15419844853674249375"}},"outputId":"7dcb633b-ad61-440a-ae5f-ea5bb8f4a918"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Parameters currently in use:\n","\n","{'bootstrap': True,\n"," 'ccp_alpha': 0.0,\n"," 'criterion': 'squared_error',\n"," 'max_depth': None,\n"," 'max_features': 1.0,\n"," 'max_leaf_nodes': None,\n"," 'max_samples': None,\n"," 'min_impurity_decrease': 0.0,\n"," 'min_samples_leaf': 1,\n"," 'min_samples_split': 2,\n"," 'min_weight_fraction_leaf': 0.0,\n"," 'n_estimators': 100,\n"," 'n_jobs': None,\n"," 'oob_score': False,\n"," 'random_state': 42,\n"," 'verbose': 0,\n"," 'warm_start': False}\n"]}]},{"cell_type":"code","source":["from sklearn.model_selection import RandomizedSearchCV\n","# Number of trees in random forest\n","n_estimators = [int(x) for x in np.linspace(start = 200, stop = 2000, num = 10)]\n","# Number of features to consider at every split\n","max_features = ['auto', 'sqrt']\n","# Maximum number of levels in tree\n","max_depth = [int(x) for x in np.linspace(10, 110, num = 11)]\n","max_depth.append(None)\n","# Minimum number of samples required to split a node\n","min_samples_split = [2, 5, 10]\n","# Minimum number of samples required at each leaf node\n","min_samples_leaf = [1, 2, 4]\n","# Method of selecting samples for training each tree\n","bootstrap = [True, False]\n","# Create the random grid\n","random_grid = {'n_estimators': n_estimators,\n","               'max_features': max_features,\n","               'max_depth': max_depth,\n","               'min_samples_split': min_samples_split,\n","               'min_samples_leaf': min_samples_leaf,\n","               'bootstrap': bootstrap}\n","pprint(random_grid)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cvy_VO2lAVAb","executionInfo":{"status":"ok","timestamp":1689885170664,"user_tz":420,"elapsed":167,"user":{"displayName":"RUCHI Bondre","userId":"15419844853674249375"}},"outputId":"1c368be8-89b8-4938-a2ef-c5416dafd583"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["{'bootstrap': [True, False],\n"," 'max_depth': [10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, None],\n"," 'max_features': ['auto', 'sqrt'],\n"," 'min_samples_leaf': [1, 2, 4],\n"," 'min_samples_split': [2, 5, 10],\n"," 'n_estimators': [200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000]}\n"]}]},{"cell_type":"code","source":["# Use the random grid to search for best hyperparameters\n","# First create the base model to tune\n","rf = RandomForestRegressor()\n","# Random search of parameters, using 3 fold cross validation,\n","# search across 100 different combinations, and use all available cores\n","rf_random = RandomizedSearchCV(estimator = rf, param_distributions = random_grid, n_iter = 100, cv = 3, verbose=2, random_state=42, n_jobs = -1)\n","# Fit the random search model\n","rf_random.fit(X_train,y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":191},"id":"DUHO9eVrAgvr","executionInfo":{"status":"ok","timestamp":1689885539784,"user_tz":420,"elapsed":275877,"user":{"displayName":"RUCHI Bondre","userId":"15419844853674249375"}},"outputId":"ac950fe1-f3df-4f5b-8fae-af7443afa8ee"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Fitting 3 folds for each of 100 candidates, totalling 300 fits\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n"]},{"output_type":"execute_result","data":{"text/plain":["RandomizedSearchCV(cv=3, estimator=RandomForestRegressor(), n_iter=100,\n","                   n_jobs=-1,\n","                   param_distributions={'bootstrap': [True, False],\n","                                        'max_depth': [10, 20, 30, 40, 50, 60,\n","                                                      70, 80, 90, 100, 110,\n","                                                      None],\n","                                        'max_features': ['auto', 'sqrt'],\n","                                        'min_samples_leaf': [1, 2, 4],\n","                                        'min_samples_split': [2, 5, 10],\n","                                        'n_estimators': [200, 400, 600, 800,\n","                                                         1000, 1200, 1400, 1600,\n","                                                         1800, 2000]},\n","                   random_state=42, verbose=2)"],"text/html":["<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomizedSearchCV(cv=3, estimator=RandomForestRegressor(), n_iter=100,\n","                   n_jobs=-1,\n","                   param_distributions={&#x27;bootstrap&#x27;: [True, False],\n","                                        &#x27;max_depth&#x27;: [10, 20, 30, 40, 50, 60,\n","                                                      70, 80, 90, 100, 110,\n","                                                      None],\n","                                        &#x27;max_features&#x27;: [&#x27;auto&#x27;, &#x27;sqrt&#x27;],\n","                                        &#x27;min_samples_leaf&#x27;: [1, 2, 4],\n","                                        &#x27;min_samples_split&#x27;: [2, 5, 10],\n","                                        &#x27;n_estimators&#x27;: [200, 400, 600, 800,\n","                                                         1000, 1200, 1400, 1600,\n","                                                         1800, 2000]},\n","                   random_state=42, verbose=2)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" ><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomizedSearchCV</label><div class=\"sk-toggleable__content\"><pre>RandomizedSearchCV(cv=3, estimator=RandomForestRegressor(), n_iter=100,\n","                   n_jobs=-1,\n","                   param_distributions={&#x27;bootstrap&#x27;: [True, False],\n","                                        &#x27;max_depth&#x27;: [10, 20, 30, 40, 50, 60,\n","                                                      70, 80, 90, 100, 110,\n","                                                      None],\n","                                        &#x27;max_features&#x27;: [&#x27;auto&#x27;, &#x27;sqrt&#x27;],\n","                                        &#x27;min_samples_leaf&#x27;: [1, 2, 4],\n","                                        &#x27;min_samples_split&#x27;: [2, 5, 10],\n","                                        &#x27;n_estimators&#x27;: [200, 400, 600, 800,\n","                                                         1000, 1200, 1400, 1600,\n","                                                         1800, 2000]},\n","                   random_state=42, verbose=2)</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: RandomForestRegressor</label><div class=\"sk-toggleable__content\"><pre>RandomForestRegressor()</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestRegressor</label><div class=\"sk-toggleable__content\"><pre>RandomForestRegressor()</pre></div></div></div></div></div></div></div></div></div></div>"]},"metadata":{},"execution_count":14}]},{"cell_type":"code","source":["rf_random.best_params_"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"58RREjetCI2h","executionInfo":{"status":"ok","timestamp":1689885650912,"user_tz":420,"elapsed":281,"user":{"displayName":"RUCHI Bondre","userId":"15419844853674249375"}},"outputId":"762e4b91-f362-4415-8a34-339c9200855a"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'n_estimators': 200,\n"," 'min_samples_split': 5,\n"," 'min_samples_leaf': 4,\n"," 'max_features': 'auto',\n"," 'max_depth': 80,\n"," 'bootstrap': True}"]},"metadata":{},"execution_count":15}]},{"cell_type":"code","source":["def evaluate(model, test_features, test_labels):\n","    predictions = model.predict(test_features)\n","    errors = abs(predictions - test_labels)\n","    mape = 100 * np.mean(errors / test_labels)\n","    accuracy = 100 - mape\n","    print('Model Performance')\n","    print('Average Error: {:0.4f} degrees.'.format(np.mean(errors)))\n","    print('Accuracy = {:0.2f}%.'.format(accuracy))\n","    return accuracy\n","base_model = RandomForestRegressor(n_estimators = 10, random_state = 42)\n","base_model.fit(X_train,y_train)\n","base_accuracy = evaluate(base_model, X_test, y_test)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8s5NGiOGCO6L","executionInfo":{"status":"ok","timestamp":1689885829553,"user_tz":420,"elapsed":326,"user":{"displayName":"RUCHI Bondre","userId":"15419844853674249375"}},"outputId":"bbe95f29-1474-439f-bf21-9ff281927dd0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Model Performance\n","Average Error: 7.3045 degrees.\n","Accuracy = -inf%.\n"]}]},{"cell_type":"code","source":["from sklearn.ensemble import RandomForestRegressor\n","rf = RandomForestRegressor(n_estimators=200,min_samples_leaf=4,min_samples_split=5,\n","                           max_features='auto',\n","                           max_depth=80)\n","rf.fit(X_train, y_train)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":148},"id":"o790EY-NDs44","executionInfo":{"status":"ok","timestamp":1689886678046,"user_tz":420,"elapsed":361,"user":{"displayName":"RUCHI Bondre","userId":"15419844853674249375"}},"outputId":"3e78b04a-180b-4632-febf-d719c91b6287"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/ensemble/_forest.py:413: FutureWarning: `max_features='auto'` has been deprecated in 1.1 and will be removed in 1.3. To keep the past behaviour, explicitly set `max_features=1.0` or remove this parameter as it is also the default value for RandomForestRegressors and ExtraTreesRegressors.\n","  warn(\n"]},{"output_type":"execute_result","data":{"text/plain":["RandomForestRegressor(max_depth=80, max_features='auto', min_samples_leaf=4,\n","                      min_samples_split=5, n_estimators=200)"],"text/html":["<style>#sk-container-id-4 {color: black;background-color: white;}#sk-container-id-4 pre{padding: 0;}#sk-container-id-4 div.sk-toggleable {background-color: white;}#sk-container-id-4 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-4 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-4 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-4 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-4 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-4 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-4 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-4 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-4 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-4 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-4 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-4 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-4 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-4 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-4 div.sk-item {position: relative;z-index: 1;}#sk-container-id-4 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-4 div.sk-item::before, #sk-container-id-4 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-4 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-4 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-4 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-4 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-4 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-4 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-4 div.sk-label-container {text-align: center;}#sk-container-id-4 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-4 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-4\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestRegressor(max_depth=80, max_features=&#x27;auto&#x27;, min_samples_leaf=4,\n","                      min_samples_split=5, n_estimators=200)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-6\" type=\"checkbox\" checked><label for=\"sk-estimator-id-6\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestRegressor</label><div class=\"sk-toggleable__content\"><pre>RandomForestRegressor(max_depth=80, max_features=&#x27;auto&#x27;, min_samples_leaf=4,\n","                      min_samples_split=5, n_estimators=200)</pre></div></div></div></div></div>"]},"metadata":{},"execution_count":26}]},{"cell_type":"code","source":["from sklearn.metrics import mean_squared_error\n","from sklearn.metrics import r2_score\n","from sklearn.metrics import mean_absolute_error\n","prediction = rf.predict(X_test)\n","mse = mean_squared_error(y_test, prediction)\n","rmse = mse**.5\n","r2 = r2_score(y_test, prediction)\n","mae = mean_absolute_error(y_test, prediction)\n","print(mse)\n","print(rmse)\n","print(r2)\n","print(mae)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WllcV8FvCu_2","executionInfo":{"status":"ok","timestamp":1689886681121,"user_tz":420,"elapsed":458,"user":{"displayName":"RUCHI Bondre","userId":"15419844853674249375"}},"outputId":"0abfc3b5-f991-4a5b-aa9f-097922279243"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["114.38072573433556\n","10.694892506908873\n","0.07991013340182418\n","7.280789805983563\n"]}]}]}